
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000352  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000333  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001bf  00000000  00000000  00000799  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001dc  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000240  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000271  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <update_time>:
volatile uint8_t segment_visible = 0x0;//0...LEFT, 1...RIGHT
volatile uint16_t countdown_time = 0x0;

uint8_t rotary_old = 0;

void update_time(uint16_t sec){
  a6:	ac 01       	movw	r20, r24
	if(sec < 100){
  a8:	84 36       	cpi	r24, 0x64	; 100
  aa:	91 05       	cpc	r25, r1
  ac:	08 f5       	brcc	.+66     	; 0xf0 <update_time+0x4a>
		PORT_UI &= ~0x3;
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	88 b9       	out	0x08, r24	; 8
		PORT_UI |= (1 << PIN_LED_LOW);
  b4:	40 9a       	sbi	0x08, 0	; 8
		segment_num_high = sec / 10;
  b6:	9a 01       	movw	r18, r20
  b8:	ad ec       	ldi	r26, 0xCD	; 205
  ba:	bc ec       	ldi	r27, 0xCC	; 204
  bc:	0e 94 98 01 	call	0x330	; 0x330 <__umulhisi3>
  c0:	96 95       	lsr	r25
  c2:	87 95       	ror	r24
  c4:	96 95       	lsr	r25
  c6:	87 95       	ror	r24
  c8:	96 95       	lsr	r25
  ca:	87 95       	ror	r24
  cc:	80 93 15 01 	sts	0x0115, r24
		segment_num_low = sec % 10;
  d0:	9c 01       	movw	r18, r24
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	82 0f       	add	r24, r18
  e4:	93 1f       	adc	r25, r19
  e6:	48 1b       	sub	r20, r24
  e8:	59 0b       	sbc	r21, r25
  ea:	40 93 14 01 	sts	0x0114, r20
  ee:	08 95       	ret
		} else {
		PORT_UI &= ~0x3;
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	8c 7f       	andi	r24, 0xFC	; 252
  f4:	88 b9       	out	0x08, r24	; 8
		PORT_UI |= (1 << PIN_LED_HIGH);
  f6:	41 9a       	sbi	0x08, 1	; 8
		uint16_t min = sec / 60;
  f8:	9a 01       	movw	r18, r20
  fa:	a9 e8       	ldi	r26, 0x89	; 137
  fc:	b8 e8       	ldi	r27, 0x88	; 136
  fe:	0e 94 98 01 	call	0x330	; 0x330 <__umulhisi3>
 102:	fc 01       	movw	r30, r24
 104:	f6 95       	lsr	r31
 106:	e7 95       	ror	r30
 108:	f2 95       	swap	r31
 10a:	e2 95       	swap	r30
 10c:	ef 70       	andi	r30, 0x0F	; 15
 10e:	ef 27       	eor	r30, r31
 110:	ff 70       	andi	r31, 0x0F	; 15
 112:	ef 27       	eor	r30, r31
		segment_num_high = min / 10;
 114:	9f 01       	movw	r18, r30
 116:	ad ec       	ldi	r26, 0xCD	; 205
 118:	bc ec       	ldi	r27, 0xCC	; 204
 11a:	0e 94 98 01 	call	0x330	; 0x330 <__umulhisi3>
 11e:	ac 01       	movw	r20, r24
 120:	56 95       	lsr	r21
 122:	47 95       	ror	r20
 124:	56 95       	lsr	r21
 126:	47 95       	ror	r20
 128:	56 95       	lsr	r21
 12a:	47 95       	ror	r20
 12c:	40 93 15 01 	sts	0x0115, r20
		segment_num_low = min % 10;
 130:	ca 01       	movw	r24, r20
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	48 0f       	add	r20, r24
 144:	59 1f       	adc	r21, r25
 146:	e4 1b       	sub	r30, r20
 148:	f5 0b       	sbc	r31, r21
 14a:	e0 93 14 01 	sts	0x0114, r30
 14e:	08 95       	ret

00000150 <rotary_update>:
	}
}

uint8_t rotary_update(){
	uint8_t current = (PIN_UI >> 4) & 0x3;
 150:	96 b1       	in	r25, 0x06	; 6
 152:	92 95       	swap	r25
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	93 70       	andi	r25, 0x03	; 3
	switch(current) {
 158:	92 30       	cpi	r25, 0x02	; 2
 15a:	21 f0       	breq	.+8      	; 0x164 <rotary_update+0x14>
 15c:	93 30       	cpi	r25, 0x03	; 3
 15e:	19 f4       	brne	.+6      	; 0x166 <rotary_update+0x16>
		case 2:
		current = 3;
		break;
		case 3:
		current = 2;
 160:	92 e0       	ldi	r25, 0x02	; 2
		break;
 162:	01 c0       	rjmp	.+2      	; 0x166 <rotary_update+0x16>

uint8_t rotary_update(){
	uint8_t current = (PIN_UI >> 4) & 0x3;
	switch(current) {
		case 2:
		current = 3;
 164:	93 e0       	ldi	r25, 0x03	; 3
		current = 2;
		break;
		default:
		break;
	}
	int8_t diff = current - rotary_old;
 166:	80 91 10 01 	lds	r24, 0x0110
 16a:	29 2f       	mov	r18, r25
 16c:	28 1b       	sub	r18, r24
	uint8_t result = 0;
	switch(diff) {
 16e:	2f 3f       	cpi	r18, 0xFF	; 255
 170:	51 f0       	breq	.+20     	; 0x186 <rotary_update+0x36>
 172:	1c f4       	brge	.+6      	; 0x17a <rotary_update+0x2a>
 174:	2d 3f       	cpi	r18, 0xFD	; 253
 176:	49 f0       	breq	.+18     	; 0x18a <rotary_update+0x3a>
 178:	04 c0       	rjmp	.+8      	; 0x182 <rotary_update+0x32>
 17a:	21 30       	cpi	r18, 0x01	; 1
 17c:	31 f0       	breq	.+12     	; 0x18a <rotary_update+0x3a>
 17e:	23 30       	cpi	r18, 0x03	; 3
 180:	11 f0       	breq	.+4      	; 0x186 <rotary_update+0x36>
		break;
		default:
		break;
	}
	int8_t diff = current - rotary_old;
	uint8_t result = 0;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	03 c0       	rjmp	.+6      	; 0x18c <rotary_update+0x3c>
		case -3:
		result = ROTARY_UP;
		break;
		case -1:
		case 3:
		result = ROTARY_DOWN;
 186:	82 e0       	ldi	r24, 0x02	; 2
		break;
 188:	01 c0       	rjmp	.+2      	; 0x18c <rotary_update+0x3c>
	int8_t diff = current - rotary_old;
	uint8_t result = 0;
	switch(diff) {
		case 1:
		case -3:
		result = ROTARY_UP;
 18a:	81 e0       	ldi	r24, 0x01	; 1
		result = ROTARY_DOWN;
		break;
		default:
		break;
	}
	rotary_old = current;
 18c:	90 93 10 01 	sts	0x0110, r25
	return result;
}
 190:	08 95       	ret

00000192 <init_ui>:
void init_ui(){
	DDR_COMPONENT = 0x03;
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	84 b9       	out	0x04, r24	; 4
	
	DDR_UI = 0b001111;
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	97 b9       	out	0x07, r25	; 7
	PORT_UI = 0b111111;
 19a:	9f e3       	ldi	r25, 0x3F	; 63
 19c:	98 b9       	out	0x08, r25	; 8
	
	DDR_7SEG = 0xff;
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0B = 0x03;//1/64
 1a2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01;//TOIE
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 6e 00 	sts	0x006E, r24
 1aa:	08 95       	ret

000001ac <__vector_16>:
}

ISR(TIMER0_OVF_vect){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	//rotary
	switch(rotary_update()){
 1ce:	0e 94 a8 00 	call	0x150	; 0x150 <rotary_update>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	19 f0       	breq	.+6      	; 0x1dc <__vector_16+0x30>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	c1 f0       	breq	.+48     	; 0x20a <__vector_16+0x5e>
 1da:	2f c0       	rjmp	.+94     	; 0x23a <__vector_16+0x8e>
		case ROTARY_UP:
			countdown_time += countdown_time < 100 ? 10 : 60;
 1dc:	80 91 11 01 	lds	r24, 0x0111
 1e0:	90 91 12 01 	lds	r25, 0x0112
 1e4:	84 36       	cpi	r24, 0x64	; 100
 1e6:	91 05       	cpc	r25, r1
 1e8:	18 f4       	brcc	.+6      	; 0x1f0 <__vector_16+0x44>
 1ea:	2a e0       	ldi	r18, 0x0A	; 10
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <__vector_16+0x48>
 1f0:	2c e3       	ldi	r18, 0x3C	; 60
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	80 91 11 01 	lds	r24, 0x0111
 1f8:	90 91 12 01 	lds	r25, 0x0112
 1fc:	82 0f       	add	r24, r18
 1fe:	93 1f       	adc	r25, r19
 200:	90 93 12 01 	sts	0x0112, r25
 204:	80 93 11 01 	sts	0x0111, r24
			break;
 208:	18 c0       	rjmp	.+48     	; 0x23a <__vector_16+0x8e>
		case ROTARY_DOWN:
			countdown_time -= countdown_time > 10 ? 10 : countdown_time;
 20a:	80 91 11 01 	lds	r24, 0x0111
 20e:	90 91 12 01 	lds	r25, 0x0112
 212:	20 91 11 01 	lds	r18, 0x0111
 216:	30 91 12 01 	lds	r19, 0x0112
 21a:	2b 30       	cpi	r18, 0x0B	; 11
 21c:	31 05       	cpc	r19, r1
 21e:	28 f4       	brcc	.+10     	; 0x22a <__vector_16+0x7e>
 220:	20 91 11 01 	lds	r18, 0x0111
 224:	30 91 12 01 	lds	r19, 0x0112
 228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_16+0x82>
 22a:	2a e0       	ldi	r18, 0x0A	; 10
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	82 1b       	sub	r24, r18
 230:	93 0b       	sbc	r25, r19
 232:	90 93 12 01 	sts	0x0112, r25
 236:	80 93 11 01 	sts	0x0111, r24
			break;
	}
	//7seg
	update_time(countdown_time);
 23a:	80 91 11 01 	lds	r24, 0x0111
 23e:	90 91 12 01 	lds	r25, 0x0112
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <update_time>
	switch(segment_visible++ & 0x7){
 246:	80 91 13 01 	lds	r24, 0x0113
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	98 0f       	add	r25, r24
 24e:	90 93 13 01 	sts	0x0113, r25
 252:	87 70       	andi	r24, 0x07	; 7
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	61 f0       	breq	.+24     	; 0x270 <__vector_16+0xc4>
 258:	28 f0       	brcs	.+10     	; 0x264 <__vector_16+0xb8>
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	19 f0       	breq	.+6      	; 0x264 <__vector_16+0xb8>
 25e:	85 30       	cpi	r24, 0x05	; 5
 260:	91 f0       	breq	.+36     	; 0x286 <__vector_16+0xda>
 262:	1b c0       	rjmp	.+54     	; 0x29a <__vector_16+0xee>
		case 0x0:
		case 0x4:
		PORT_7SEG = 0xff;
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	8b b9       	out	0x0b, r24	; 11
		PORT_UI |= 0b1100;
 268:	88 b1       	in	r24, 0x08	; 8
 26a:	8c 60       	ori	r24, 0x0C	; 12
 26c:	88 b9       	out	0x08, r24	; 8
		break;
 26e:	15 c0       	rjmp	.+42     	; 0x29a <__vector_16+0xee>
		case 0x1:
		PORT_7SEG = ~segment_data[segment_num_high & 0xf];
 270:	e0 91 15 01 	lds	r30, 0x0115
 274:	ef 70       	andi	r30, 0x0F	; 15
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	e0 50       	subi	r30, 0x00	; 0
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	80 81       	ld	r24, Z
 27e:	80 95       	com	r24
 280:	8b b9       	out	0x0b, r24	; 11
		PORT_UI &= ~(1 << PIN_COM_7SEG_HIGH);
 282:	43 98       	cbi	0x08, 3	; 8
		break;
 284:	0a c0       	rjmp	.+20     	; 0x29a <__vector_16+0xee>
		case 0x5:
		PORT_7SEG = ~segment_data[segment_num_low & 0xf];
 286:	e0 91 14 01 	lds	r30, 0x0114
 28a:	ef 70       	andi	r30, 0x0F	; 15
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e0 50       	subi	r30, 0x00	; 0
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	80 81       	ld	r24, Z
 294:	80 95       	com	r24
 296:	8b b9       	out	0x0b, r24	; 11
		PORT_UI &= ~(1 << PIN_COM_7SEG_LOW);
 298:	42 98       	cbi	0x08, 2	; 8
		break;
	}
	//SSR
	if(countdown_time) PORT_COMPONENT |= (1 << PIN_SSR);
 29a:	80 91 11 01 	lds	r24, 0x0111
 29e:	90 91 12 01 	lds	r25, 0x0112
 2a2:	89 2b       	or	r24, r25
 2a4:	11 f0       	breq	.+4      	; 0x2aa <__vector_16+0xfe>
 2a6:	29 9a       	sbi	0x05, 1	; 5
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <__vector_16+0x100>
	else PORT_COMPONENT &= ~(1 << PIN_SSR);
 2aa:	29 98       	cbi	0x05, 1	; 5
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	84 e3       	ldi	r24, 0x34	; 52
 2d2:	9c e0       	ldi	r25, 0x0C	; 12
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x6>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x10>
 2de:	00 00       	nop
//////////////////////////////////////////////////////////////////////////

int main(void)
{
	_delay_ms(500);
	countdown_time = 60 * 31;
 2e0:	84 e4       	ldi	r24, 0x44	; 68
 2e2:	97 e0       	ldi	r25, 0x07	; 7
 2e4:	90 93 12 01 	sts	0x0112, r25
 2e8:	80 93 11 01 	sts	0x0111, r24
	
	init_ui();
 2ec:	0e 94 c9 00 	call	0x192	; 0x192 <init_ui>
	
	sei();
 2f0:	78 94       	sei
}

//////////////////////////////////////////////////////////////////////////

int main(void)
{
 2f2:	38 ee       	ldi	r19, 0xE8	; 232
 2f4:	23 e0       	ldi	r18, 0x03	; 3
	
	sei();
	///////////////////////////
	
	for(uint16_t i = 0 ; ; ++i){
		if(countdown_time > 0) --countdown_time;
 2f6:	80 91 11 01 	lds	r24, 0x0111
 2fa:	90 91 12 01 	lds	r25, 0x0112
 2fe:	89 2b       	or	r24, r25
 300:	a1 f0       	breq	.+40     	; 0x32a <main+0x5c>
 302:	80 91 11 01 	lds	r24, 0x0111
 306:	90 91 12 01 	lds	r25, 0x0112
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	90 93 12 01 	sts	0x0112, r25
 310:	80 93 11 01 	sts	0x0111, r24
 314:	0a c0       	rjmp	.+20     	; 0x32a <main+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	ef ec       	ldi	r30, 0xCF	; 207
 318:	f7 e0       	ldi	r31, 0x07	; 7
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x4c>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x52>
 320:	00 00       	nop
 322:	01 97       	sbiw	r24, 0x01	; 1
		
		for(uint16_t j = 0 ; j < 1000 ; ++j){
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	b9 f7       	brne	.-18     	; 0x316 <main+0x48>
 328:	e6 cf       	rjmp	.-52     	; 0x2f6 <main+0x28>
}

//////////////////////////////////////////////////////////////////////////

int main(void)
{
 32a:	83 2f       	mov	r24, r19
 32c:	92 2f       	mov	r25, r18
 32e:	f3 cf       	rjmp	.-26     	; 0x316 <main+0x48>

00000330 <__umulhisi3>:
 330:	a2 9f       	mul	r26, r18
 332:	b0 01       	movw	r22, r0
 334:	b3 9f       	mul	r27, r19
 336:	c0 01       	movw	r24, r0
 338:	a3 9f       	mul	r26, r19
 33a:	70 0d       	add	r23, r0
 33c:	81 1d       	adc	r24, r1
 33e:	11 24       	eor	r1, r1
 340:	91 1d       	adc	r25, r1
 342:	b2 9f       	mul	r27, r18
 344:	70 0d       	add	r23, r0
 346:	81 1d       	adc	r24, r1
 348:	11 24       	eor	r1, r1
 34a:	91 1d       	adc	r25, r1
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
